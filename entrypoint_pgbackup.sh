#!/bin/bash

# üìå Entrypoint para backup autom√°tico de PostgreSQL
# Este script ejecuta copias de seguridad peri√≥dicas y maneja errores

set -e  # ‚õî Si ocurre un error, el script se detiene inmediatamente.
set -u  # üîí Tratar variables no definidas como error.
set -o pipefail  # üöÄ Detectar fallos en comandos en tuber√≠as (|).

echo "üü¢ [INFO] Iniciando servicio de backup de PostgreSQL..."

# üîπ Definir variables de entorno con valores predeterminados
BACKUP_INTERVAL=${BACKUP_INTERVAL:-86400}  # ‚è≥ Intervalo entre backups en segundos (24h por defecto)
BACKUP_DIR="/backups"
PGHOST=${PGHOST:-postgres}  # üìå Servidor de PostgreSQL
PGUSER=${PGUSER:-odoo}  # üë§ Usuario de PostgreSQL
PGDATABASE=${PGDATABASE:-odoo}  # üóÑÔ∏è Base de datos a respaldar

# üìÇ Asegurar que el directorio de backups existe
mkdir -p "$BACKUP_DIR"
chmod -R 777 "$BACKUP_DIR"
echo "üîπ Directorio de backups: $BACKUP_DIR"

# üîç **Verificar conexi√≥n con PostgreSQL antes de iniciar backups**
echo "‚è≥ [INFO] Verificando disponibilidad de PostgreSQL en: $PGHOST..."
until pg_isready -h "$PGHOST" -U "$PGUSER" > /dev/null 2>&1; do
  echo "üîÑ [INFO] PostgreSQL a√∫n no est√° listo, esperando 5 segundos..."
  sleep 5
done
echo "‚úÖ [INFO] PostgreSQL est√° disponible. Procediendo con backups..."

# üîÑ Funci√≥n para realizar backup
do_backup() {
  TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
  BACKUP_FILE="$BACKUP_DIR/backup_$TIMESTAMP.sql"
  echo "üîÑ [INFO] Realizando backup en: $BACKUP_FILE"
  if pg_dumpall -h "$PGHOST" -U "$PGUSER" > "$BACKUP_FILE"; then
    ln -sf "$BACKUP_FILE" "$BACKUP_DIR/latest_backup.sql"
    echo "‚úÖ [INFO] Backup completado con √©xito: $BACKUP_FILE"
  else
    echo "‚ùå [ERROR] Error al realizar el backup."
    exit 1
  fi
}

# üîÅ Ejecutar backups en intervalos definidos
echo "‚è≥ [INFO] Iniciando ciclo de backups autom√°ticos cada $BACKUP_INTERVAL segundos..."
while true; do
  do_backup
  echo "‚è≥ [INFO] Siguiente backup en $BACKUP_INTERVAL segundos..."
  sleep "$BACKUP_INTERVAL"
done
