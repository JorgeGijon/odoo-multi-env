#!/bin/bash
set -e  # ‚õî Si hay un error en cualquier l√≠nea del script, el proceso se detiene inmediatamente.

echo "üü¢ [INFO] Iniciando `entrypoint_pgbackup.sh` para copias de seguridad de PostgreSQL..."
echo "üü¢ [INFO] Variables de entorno cargadas:"
echo "    üîπ PGHOST: $PGHOST"
echo "    üîπ PGDATABASE: $PGDATABASE"
echo "    üîπ PGUSER: $PGUSER"
echo "    üîπ PGBACKUP_DIR: $PGBACKUP_DIR"
echo "    üîπ BACKUP_INTERVAL: ${BACKUP_INTERVAL:-86400} segundos (valor por defecto: 24 horas)"
echo "    üîπ RETENTION_DAYS: ${RETENTION_DAYS:-7} d√≠as (valor por defecto: 7 d√≠as)"

# üìÇ **CREAR DIRECTORIO DE BACKUPS SI NO EXISTE**
if [[ ! -d "$PGBACKUP_DIR" ]]; then
  echo "‚ö†Ô∏è [WARN] Directorio de backups $PGBACKUP_DIR no encontrado. Cre√°ndolo..."
  mkdir -p "$PGBACKUP_DIR"
  echo "‚úÖ [INFO] Directorio creado: $PGBACKUP_DIR"
fi

# üîç **VERIFICAR CONEXI√ìN CON POSTGRESQL ANTES DE EMPEZAR**
echo "‚è≥ [INFO] Verificando disponibilidad de PostgreSQL en: $PGHOST..."
until pg_isready -h "$PGHOST" -U "$PGUSER" > /dev/null 2>&1; do
  echo "üîÑ [INFO] PostgreSQL a√∫n no est√° listo, esperando 5 segundos..."
  sleep 5
done
echo "‚úÖ [INFO] PostgreSQL est√° disponible. Comenzando ciclo de backups..."

# üîÅ **BUCLE INFINITO PARA EJECUTAR BACKUPS PERI√ìDICAMENTE**
while true; do
  # üïí Obtener timestamp actual para el nombre del backup
  TIMESTAMP=$(date +%Y%m%d_%H%M%S)
  BACKUP_FILE="$PGBACKUP_DIR/backup_${TIMESTAMP}.dump"

  echo "üîÑ [INFO] Iniciando backup de la base de datos: $PGDATABASE"
  echo "    üìÇ Archivo destino: $BACKUP_FILE"

  # üõ¢Ô∏è **EJECUTAR BACKUP CON `pg_dump`**
  if PGPASSWORD=$PGPASSWORD pg_dump -h "$PGHOST" -U "$PGUSER" -F c -b -v -f "$BACKUP_FILE" "$PGDATABASE"; then
    echo "‚úÖ [SUCCESS] Backup completado con √©xito: $BACKUP_FILE"
  else
    echo "‚ùå [ERROR] Fallo al generar el backup. Revisar la conexi√≥n con PostgreSQL."
    exit 1
  fi

  # üóëÔ∏è **LIMPIAR BACKUPS ANTIGUOS SEG√öN `RETENTION_DAYS`**
  echo "üßπ [INFO] Eliminando backups m√°s antiguos que $RETENTION_DAYS d√≠as..."
  find "$PGBACKUP_DIR" -type f -name "backup_*.dump" -mtime +$RETENTION_DAYS -exec rm -f {} \;

  echo "‚úÖ [INFO] Limpieza de backups antiguos completada."

  # ‚è≥ **ESPERAR `BACKUP_INTERVAL` SEGUNDOS ANTES DEL SIGUIENTE BACKUP**
  echo "‚è≥ [INFO] Esperando $BACKUP_INTERVAL segundos antes del pr√≥ximo backup..."
  sleep "$BACKUP_INTERVAL"
done
