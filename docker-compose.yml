# 📌 Archivo base `docker-compose.yml`
# Contiene la configuración común para todos los entornos (desarrollo, staging, producción)

# 🌐 Red compartida entre los servicios de Odoo
networks:
  odoo-network:
    name: odoo-network
    driver: bridge

services:
  # 🏗️ ODOO - Aplicación ERP
  odoo:
    image: odoo-multi-env-odoo
    build:
      context: .
      dockerfile: Dockerfile.odoo  # 🛠️ Define la imagen base de Odoo
    container_name: ${INSTANCE:-prueba}-odoo
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy  # ✅ Espera a que PostgreSQL esté listo
      redis:
        condition: service_healthy  # ✅ Espera a que Redis esté listo
    volumes:
      - ./addons:/mnt/custom-addons                      # 🔌 Monta los módulos personalizados
      - ./odoo-src:/usr/lib/python3/dist-packages/odoo   # 🖥️ Acceso al código fuente de Odoo
      - ./data/odoo:/var/lib/odoo                        # 💾 Almacena datos persistentes de Odoo
    networks:
      - odoo-network

  # 🐘 POSTGRESQL - Base de datos
  postgres:
    image: postgres:16
    container_name: ${INSTANCE:-prueba}-postgres
    restart: unless-stopped
    volumes:
      - ./data/postgres:/var/lib/postgresql/data  # 💾 Datos persistentes de PostgreSQL
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "odoo"]
      interval: 10s
      retries: 5
    networks:
      - odoo-network

  # 🔴 REDIS - Caché y almacenamiento de sesiones
  redis:
    image: redis:latest
    container_name: ${INSTANCE:-prueba}-redis
    restart: unless-stopped
    command: redis-server --appendonly yes  # 🛠️ Configura Redis con persistencia
    volumes:
      - ./data/redis:/data  # 💾 Datos persistentes de Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
    networks:
      - odoo-network

  # 🛢️ PGBackup - Backups automáticos de PostgreSQL
  pgbackup:
    image: odoo-multi-env-pgbackup
    build:
      context: .
      dockerfile: Dockerfile.pgbackup  # 🛠️ Imagen personalizada para backups
    container_name: ${INSTANCE:-prueba}-pgbackup
    restart: unless-stopped
    volumes:
      - ./backups:/backups  # 💾 Carpeta local para backups
    depends_on:
      postgres:
        condition: service_healthy  # ✅ Espera a que PostgreSQL esté listo
    networks:
      - odoo-network

  # 🌍 NGINX - Proxy inverso para manejar tráfico de Stage y Prod
  nginx:
    image: nginx:latest
    container_name: ${INSTANCE:-prueba}-nginx
    restart: always
    profiles:
      - "stage"
      - "prod"  # 🔥 Se activa solo en estos entornos
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf:ro  # 📂 Configuración de Nginx
    depends_on:
      - odoo
    networks:
      - odoo-network
    ports:
      - "80:80"  # 📌 Redirige tráfico HTTP a Odoo
