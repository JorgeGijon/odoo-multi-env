version: "3.8"

# 🌐 Red compartida entre los servicios de Odoo
networks:
  odoo-network:
    external: true  # 🔗 Permite compartir la red con otros proyectos

services:
  # 🏗️ ODOO - Aplicación ERP
  odoo:
    build:
      context: .                   # 📂 Usa la carpeta raíz como contexto de construcción
      dockerfile: Dockerfile.odoo  # 🛠️ Especifica el Dockerfile para Odoo
    container_name: ${INSTANCE:-prueba}-odoo  # 🏷️ Nombre dinámico del contenedor
    restart: unless-stopped
    env_file:
      - .env  # 🔹 Carga las variables generales desde el archivo `.env`
    entrypoint: ["/entrypoint.sh"]  # 🏁 Ejecuta el script de entrada
    depends_on:
      postgres:
        condition: service_healthy  # ✅ Espera a que PostgreSQL esté listo
      redis:
        condition: service_healthy  # ✅ Espera a que Redis esté listo
    volumes:
      - ./entrypoint_odoo.sh:/entrypoint.sh:ro           # 🚀 Script de inicio para Odoo
      - ./data/config:/config                            # 📜 Configuración dinámica (`odoo_dev.conf`, `odoo_prod.conf`)
      - ./addons:/mnt/custom-addons                      # 🔌 Monta los módulos personalizados
      - ./odoo-src:/usr/lib/python3/dist-packages/odoo   # 🖥️ Acceso al código fuente de Odoo
      - ./data/odoo:/var/lib/odoo                        # 💾 Almacena datos persistentes de Odoo
      - ./data/filestore:/var/lib/odoo/filestore         # 📂 Almacenamiento de archivos adjuntos
    networks:
      - odoo-network  # 🌍 Conexión a la red de Odoo

  # 🐘 POSTGRESQL - Base de datos
  postgres:
    image: postgres:16
    container_name: ${INSTANCE:-prueba}-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=odoo               # 👤 Usuario de PostgreSQL
      - POSTGRES_PASSWORD=odoo_password  # 🔑 Contraseña de PostgreSQL
      - POSTGRES_DB=odoo                 # 📂 Base de datos de Odoo
    volumes:
      - ./data/postgres:/var/lib/postgresql/data  # 💾 Datos persistentes de PostgreSQL
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "odoo"]  # 🩺 Verifica si PostgreSQL está listo
      interval: 10s                              # ⏳ Verificación cada 10 segundos
      retries: 5                                 # 🔄 Reintentos en caso de fallo
    networks:
      - odoo-network  # 🌍 Conexión a la red de Odoo

  # 🔴 REDIS - Caché y almacenamiento de sesiones
  redis:
    image: redis:latest
    container_name: ${INSTANCE:-prueba}-redis
    restart: unless-stopped
    command: redis-server --appendonly yes  # 🛠️ Configura Redis para persistencia
    volumes:
      - ./data/redis:/data  # 💾 Datos persistentes de Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]  # 🩺 Verifica si Redis está activo
      interval: 10s                       # ⏳ Verificación cada 10 segundos
      retries: 5                          # 🔄 Reintentos en caso de fallo
    networks:
      - odoo-network  # 🌍 Conexión a la red de Odoo

  # 🛢️ PGBackup - Backups automáticos de PostgreSQL
  pgbackup:
    build:
      context: .  # 📂 Usa la carpeta raíz como contexto de construcción
      dockerfile: Dockerfile.pgbackup  # 🛠️ Dockerfile del servicio de backup
    container_name: ${INSTANCE:-prueba}-pgbackup
    restart: unless-stopped
    entrypoint: ["/entrypoint_pgbackup.sh"]  # 🚀 Script de inicio de backups
    environment:
      - PGHOST=${INSTANCE:-prueba}-postgres      # 📌 Servidor de PostgreSQL
      - PGUSER=odoo                 # 👤 Usuario de PostgreSQL
      - PGPASSWORD=odoo_password    # 🔑 Contraseña de PostgreSQL
      - PGDATABASE=odoo             # 📂 Base de datos de Odoo
      - BACKUP_INTERVAL=86400       # ⏳ Intervalo entre backups (1 día)
    depends_on:
      postgres:
        condition: service_healthy  # ✅ Espera a que PostgreSQL esté listo
    volumes:
      - ./backups:/backups  # 💾 Carpeta local para backups
    networks:
      - odoo-network  # 🌍 Conexión a la red de Odoo

  # 🌍 NGINX - Proxy inverso para manejar tráfico de Stage y Prod
  nginx:
    image: nginx:latest
    container_name: ${INSTANCE:-prueba}-nginx
    restart: always
    profiles:
      - "stage"
      - "prod"  # 🔥 Se activa solo en estos entornos
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf:ro  # 📂 Configuración de Nginx
    depends_on:
      - odoo
    networks:
      - odoo-network  # 🌍 Conexión a la red de Odoo
    ports:
      - "80:80"  # 📌 Redirige tráfico HTTP a Odoo
      

