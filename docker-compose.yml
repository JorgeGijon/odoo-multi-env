# üåê Red compartida entre los servicios de Odoo
networks:
  odoo-network:
    external: true  # üîó Permite compartir la red con otros proyectos

services:
  # üèóÔ∏è ODOO - Aplicaci√≥n ERP
  odoo:
    build:
      context: .                   
      dockerfile: Dockerfile.odoo  
    container_name: ${INSTANCE:-prueba}-odoo  
    restart: unless-stopped
    environment:
      - INSTANCE=${INSTANCE:-prueba}
      - ODOO_ENV=${ODOO_ENV:-development}
      - PGHOST=${INSTANCE:-prueba}-postgres
      - PGPORT=5432
      - PGUSER=${POSTGRES_USER:-odoo}
      - PGPASSWORD=${POSTGRES_PASSWORD:-odoo_password}
      - PGDATABASE=${POSTGRES_DB:-odoo}
    entrypoint: ["/entrypoint.sh"]
    depends_on:
      postgres:
        condition: service_healthy  
      redis:
        condition: service_healthy  
    volumes:
      - ./entrypoint_odoo.sh:/entrypoint.sh:ro
      - ./data/config:/config
      - ./addons:/mnt/custom-addons
      - ./odoo-src:/usr/lib/python3/dist-packages/odoo
      - ./data/odoo:/var/lib/odoo
      - ./data/filestore:/var/lib/odoo/filestore
    networks:
      - odoo-network  

  # üêò POSTGRESQL - Base de datos
  postgres:
    image: postgres:16
    container_name: ${INSTANCE:-prueba}-postgres
    restart: unless-stopped
    environment:
      - INSTANCE=${INSTANCE:-prueba}
      - POSTGRES_USER=${POSTGRES_USER:-odoo}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-odoo_password}
      - POSTGRES_DB=${POSTGRES_DB:-odoo}
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - ./data/postgres:/var/lib/postgresql/data  
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-odoo}"]
      interval: 10s                              
      retries: 5                                 
    networks:
      - odoo-network  

  # üî¥ REDIS - Cach√© y almacenamiento de sesiones
  redis:
    build:
      context: .  
      dockerfile: Dockerfile.redis  
    container_name: ${INSTANCE:-prueba}-redis
    restart: unless-stopped
    environment:
      - INSTANCE=${INSTANCE:-prueba}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_MAXMEMORY=${REDIS_MAXMEMORY:-256mb}
      - REDIS_MAXMEMORY_POLICY=${REDIS_MAXMEMORY_POLICY:-noeviction}
    volumes:
      - ./data/redis:/data  
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]  
      interval: 10s                       
      retries: 5                          
    networks:
      - odoo-network  

  # üõ¢Ô∏è PGBackup - Backups autom√°ticos de PostgreSQL
  pgbackup:
    build:
      context: .  
      dockerfile: Dockerfile.pgbackup  
    container_name: ${INSTANCE:-prueba}-pgbackup
    restart: unless-stopped
    entrypoint: ["/entrypoint_pgbackup.sh"]  
    environment:
      - INSTANCE=${INSTANCE:-prueba}
      - PGHOST=${INSTANCE:-prueba}-postgres      
      - PGUSER=${POSTGRES_USER:-odoo}
      - PGPASSWORD=${POSTGRES_PASSWORD:-odoo_password}
      - PGDATABASE=${POSTGRES_DB:-odoo}
      - BACKUP_INTERVAL=${BACKUP_INTERVAL:-86400}  
    depends_on:
      postgres:
        condition: service_healthy  
    volumes:
      - ./backups:/backups  
    networks:
      - odoo-network  

  # üåç NGINX - Proxy inverso para manejar tr√°fico de Stage y Prod
  nginx:
    image: nginx:latest
    container_name: ${INSTANCE:-prueba}-nginx
    restart: always
    profiles:
      - "stage"
      - "prod"  
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf:ro  
    depends_on:
      - odoo
    networks:
      - odoo-network  
    ports:
      - "80:80"  
