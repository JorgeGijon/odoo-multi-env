# 📌 Configuración específica para el entorno de Desarrollo
# Se ejecuta con:
# docker-compose -f docker-compose.yml -f docker-compose.override.dev.yml up -d --remove-orphans

services:
  # 🏗️ Odoo en modo Desarrollo
  odoo:
    container_name: dev-odoo
    environment:
      - ODOO_ENV=development  # 🔹 Define el entorno (el entrypoint gestiona todo lo demás)
    networks:
      - odoo-network
    volumes:
      - ./addons:/mnt/custom-addons                      # 🔌 Monta los módulos personalizados
      - ./odoo-src:/usr/lib/python3/dist-packages/odoo   # 🖥️ Acceso al código fuente de Odoo
      - ./data/odoo:/var/lib/odoo                        # 💾 Almacena datos persistentes de Odoo
    command: 
      - "python3" 
      - "-m" 
      - "debugpy" 
      - "--listen" 
      - "0.0.0.0:5678" 
      - "--wait-for-client" 
      - "/usr/bin/odoo"  # 🏗️ Odoo esperará la conexión del depurador antes de ejecutarse

  # 🐘 PostgreSQL en Desarrollo
  postgres:
    container_name: dev-postgres
    environment:
      - ODOO_ENV=development  # 📌 Es suficiente para que el entrypoint asigne variables
    networks:
      - odoo-network
    volumes:
      - ./data/postgres:/var/lib/postgresql/data  # 💾 Datos persistentes de PostgreSQL

  # 🔴 Redis en Desarrollo
  redis:
    container_name: dev-redis
    image: redis:latest
    restart: unless-stopped
    environment:
      - ODOO_ENV=development  # 📌 Redis también se configura en función del entorno
    networks:
      - odoo-network
    ports:
      - "6380:6379"  # 🔴 Expone Redis en otro puerto para evitar conflictos

  # 🛢️ PGBackup en Desarrollo
  pgbackup:
    container_name: dev-pgbackup
    environment:
      - ODOO_ENV=development  # 📌 El entrypoint manejará las variables necesarias
    networks:
      - odoo-network
    volumes:
      - ./backups:/backups  # 💾 Carpeta local para backups
